# Base case
1
--
The result is: 1
==
# Multiple numbers
1;2
--
The result is: 3
==
# Invalid options return an error in the result.
[this_is_an_unknown_option=3]
--
ERROR: Failed to parse options: UNKNOWN: Keyword [this_is_an_unknown_option] does not exist.
==
# Valid options but invalid test case.
This is not a number!!!
--
ERROR: Failed to parse This is not a number!!!
==

# Empty lines at the beginning of test cases are treated as comments.

1;2

# Empty lines at the end of test cases are treated as comments too.

--
# Comments before results are preserved, just like for the test cases.
The result is: 3
# Comments after results are preserved too.
==
--
The result is: 0
==
# Empty tests with no expected output are skipped.
# Empty tests with an expected output (the previous case) are executed.
==
# Empty lines at the start or end of test cases must be escaped, to prevent them
# from being treated like comments. This only applies to the empty lines that
# are either the first or the last line in the test case.

\

1;2

3;4

\

# End comment here.

--
\
INSERTED SECOND LINE

1;2

3;4

\
==
# This test is broken because we don't support hex yet. 
[ignore_this_test]
1;3;0x3f
--
This result is ignored and copied verbatim.
==
# Test adding a number to the result.
[add_amount=10]
1;3
--
The result is: 14
==
# Test doubling the result.
[double_result]
1;3
--
The result is: 8
==
# Multiple options per test case.
[add_amount=10][double_result]
5;3
--
The result is: 26
==
# Options can be on multiple lines.
[add_amount=10]
[double_result]
5;3
--
# This indicates that the result is necessarily the same as the previous test
# case, e.g. because the test cases are logically equivalent.
[SAME AS PREVIOUS]
==
# Override the result prefix, and set it as the new default. Notice, leading and
# trailing whitespace in option values is stripped
[default result_prefix=OK then, the result is: ]
5;3;17
--
OK then, the result is: 25
==
# This uses the new default.
3;7
--
OK then, the result is: 10
==
# We can still override the default on a single-test case basis.
[result_prefix=Overriden prefix: ]
8;13
--
Overriden prefix: 21
==
# Test various combinations using an "alternation".
1;{{2|3}}
--
ALTERNATION GROUP: 2
--
OK then, the result is: 3
--
ALTERNATION GROUP: 3
--
OK then, the result is: 4
==

# There is a weird bug in the _with_modes
# version of the library which does something weird
# when commas are part of the alternation value.
{{1|}}{{|,2}}
--
ALTERNATION GROUP: 1,
--
OK then, the result is: 1
--
ALTERNATION GROUP: 1,,2
--
OK then, the result is: 3
--
ALTERNATION GROUP: <empty>
--
\
INSERTED SECOND LINE
--
ALTERNATION GROUP: ,2
--
OK then, the result is: 2
==

{{1|}}{{|;2}}
--
ALTERNATION GROUP: 1,
--
OK then, the result is: 1
--
ALTERNATION GROUP: 1,;2
--
OK then, the result is: 3
--
ALTERNATION GROUP: <empty>
--
\
INSERTED SECOND LINE
--
ALTERNATION GROUP: ;2
--
OK then, the result is: 2
==

# When there are multiple alternations, the test library tests all combinations.
1;{{2|3}};{{3|2}}
--
ALTERNATION GROUPS:
    2,3
    3,2
--
OK then, the result is: 6
--
ALTERNATION GROUP: 2,2
--
OK then, the result is: 5
--
ALTERNATION GROUP: 3,3
--
OK then, the result is: 7
==
# Works with multiple lines.
1;
{{2|3}};
{{3|2}}

--
ALTERNATION GROUPS:
    2,3
    3,2
--
OK then, the result is: 6
--
ALTERNATION GROUP: 2,2
--
OK then, the result is: 5
--
ALTERNATION GROUP: 3,3
--
OK then, the result is: 7
==

# Test alternation with escaped '|' characters.
# The last example shows other '\' escapes pass through literally.
# The calculator demo produces errors, but it shows the alternation
# handling is working.
1 {{abc\|def|\|xx\||a\b\c\d\nx\\e}} 2
--
ALTERNATION GROUP: abc|def
--
ERROR: Failed to parse 1 abc|def 2
--
ALTERNATION GROUP: |xx|
--
ERROR: Failed to parse 1 |xx| 2
--
ALTERNATION GROUP: a\b\c\d\nx\\e
--
ERROR: Failed to parse 1 a\b\c\d\nx\\e 2
==

# An alternation ending with a single backslash currently passes
# that backslash through literally.
# \\ and \} are not treated as escapes.
{{a\bc\|d\\f|ghi\}}
--
ALTERNATION GROUP: a\bc|d\\f
--
ERROR: Failed to parse a\bc|d\\f
--
ALTERNATION GROUP: ghi\
--
ERROR: Failed to parse ghi\
==

# This shows an empty alternation at the beginning.
1{{|;2}};4
--
ALTERNATION GROUP: <empty>
--
OK then, the result is: 5
--
ALTERNATION GROUP: ;2
--
OK then, the result is: 7
==

# This shows an empty alternation at the end.
1{{;2|}};4
--
ALTERNATION GROUP: ;2
--
OK then, the result is: 7
--
ALTERNATION GROUP: <empty>
--
OK then, the result is: 5
==

# This shows an empty alternation in the middle.
1{{;2||;3}};4
--
ALTERNATION GROUP: ;2
--
OK then, the result is: 7
--
ALTERNATION GROUP: <empty>
--
OK then, the result is: 5
--
ALTERNATION GROUP: ;3
--
OK then, the result is: 8

==

# This shows a weird behavior (bug?) how alternation labels
# are formed by compacting leading empty labels
1{{|;2}}{{|;5}}{{|;8}}
--
ALTERNATION GROUP: <empty>
--
OK then, the result is: 1
--
# Notice, this is logically [,,;8]
# but leading empty strings are ignored
ALTERNATION GROUP: ;8
--
OK then, the result is: 9
--
ALTERNATION GROUP: ;5,
--
OK then, the result is: 6
--
ALTERNATION GROUP: ;5,;8
--
OK then, the result is: 14
--
# Notice, _tailing_ empty strings are
# not ignored.
ALTERNATION GROUP: ;2,,
--
OK then, the result is: 3
--
ALTERNATION GROUP: ;2,,;8
--
OK then, the result is: 11
--
ALTERNATION GROUP: ;2,;5,
--
OK then, the result is: 8
--
ALTERNATION GROUP: ;2,;5,;8
--
OK then, the result is: 16
